name: Build and Release
env:
  JAVA_BUILD_VERSION: '21'
  JAVA_DISTRIBUTION: 'temurin'
  GRAALVM_DISTRIBUTION: 'graalvm'
  APP_NAME: 'keycloak-mcp-server'
  APP_VERSION: '0.2'

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  build-jar:
    name: Build Uber JAR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Uber JAR
        run: mvn -B clean package -Dquarkus.package.type=uber-jar

      - name: Upload Uber JAR
        uses: actions/upload-artifact@v4
        with:
          name: runner-jar
          path: target/keycloak-mcp-server-*-runner.jar
          if-no-files-found: error

  build-native-linux:
    name: Build Native Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Native Linux Binary
        run: mvn -B clean package -Pnative -Dquarkus.native.container-build=true -DskipTests

      - name: Upload Native Linux Binary
        uses: actions/upload-artifact@v4
        with:
          name: keycloak-mcp-server-linux
          path: target/keycloak-mcp-server-*-runner
          retention-days: 30

  build-native-macos:
    name: Build Native macOS
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Native macOS Binary
        run: mvn -B clean package -Pnative -DskipTests

      - name: Upload Native macOS Binary
        uses: actions/upload-artifact@v4
        with:
          name: keycloak-mcp-server-macos
          path: target/keycloak-mcp-server-*-runner
          retention-days: 30

  build-native-windows:
    name: Build Native Windows
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build Native Windows Binary
        run: mvn -B clean package -Pnative -DskipTests

      - name: Upload Native Windows Binary
        uses: actions/upload-artifact@v4
        with:
          name: keycloak-mcp-server-windows
          path: target/keycloak-mcp-server-*-runner.exe
          retention-days: 30

  release:
    name: Create GitHub Release
    # Run this job only after all build jobs have successfully completed
    needs: [build-jar, build-native-linux, build-native-macos, build-native-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create releases and tags
      issues: write # To comment on issues/PRs
      pull-requests: write # To comment on issues/PRs

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Fetch all history for semantic-release to analyze
          fetch-depth: 0

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          # Download all artifacts into a single directory
          path: artifacts/

      - name: Prepare release assets
        id: prepare_assets
        run: |
          run: |
          # Stop the script if any command fails (e.g., a file isn't found)
          set -e
      
          # --- Optional but recommended: Add this to see the exact structure ---
          echo "--- Artifacts Directory Structure ---"
          ls -R artifacts/
          echo "------------------------------------"

          # Create a directory for the final assets that will be uploaded
          mkdir release-assets
          
          # Move and rename artifacts for the release
          # The paths reflect the structure created by actions/download-artifact@v4

          mv artifacts/runner-jar/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-runner.jar release-assets/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-runner.jar

          mv artifacts/${{ env.APP_NAME }}-linux/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-runner.exe release-assets/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-linux
          
          mv artifacts/${{ env.APP_NAME }}-macos/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-runner.exe release-assets/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-macos

          mv artifacts/${{ env.APP_NAME }}-windows/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-runner.exe release-assets/${{ env.APP_NAME }}-${{ env.APP_VERSION }}-windows.exe

          # --- Final Check: Verify that the files are now in release-assets ---
          echo "--- Prepared Release Assets ---"
          ls -R release-assets/
          echo "-------------------------------"
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install semantic-release and plugins
        run: npm install semantic-release @semantic-release/git @semantic-release/github @semantic-release/commit-analyzer @semantic-release/release-notes-generator

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release