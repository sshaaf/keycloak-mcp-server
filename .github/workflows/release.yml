name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

jobs:
  # --- Build job for creating artifacts ---
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: gradle
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Install dependencies and build
      run: |
        ./gradlew build
        ./gradlew quarkusBuild -Dquarkus.package.type=uber-jar
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build Native Binary (Linux)
      run: ./gradlew build -Dquarkus.package.type=native
    
    - name: Upload artifact for release job
      uses: actions/upload-artifact@v4
      with:
        name: keycloak-mcp-server-uber-jar
        path: build/keycloak-mcp-server-*-runner.jar
    
    - name: Upload Native Binary (Linux)
      uses: actions/upload-artifact@v4
      with:
        name: native-linux
        path: build/*-runner

  build-macos:
    name: Build MacOS Native Binary
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    
    - name: Build Native Binary (MacOS)
      run: ./gradlew build -Dquarkus.package.type=native
    
    - name: Upload Native Binary (MacOS)
      uses: actions/upload-artifact@v4
      with:
        name: native-macos
        path: build/*-runner

  build-windows:
    name: Build Windows Native Binary
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '21'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Visual Studio Developer Command Prompt
      uses: microsoft/setup-msbuild@v1.1
      
    - name: Set up Visual C++ Build Tools
      shell: powershell
      run: |
        # Add Visual C++ build tools to PATH
        $vsPath = & "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe" -latest -property installationPath
        $vcvarsallPath = Join-Path $vsPath "VC\Auxiliary\Build\vcvarsall.bat"
        
        # Create a batch file to set up the environment
        Set-Content -Path setup-env.bat -Value "@call `"$vcvarsallPath`" x64"
        
        # Execute the batch file and export the environment variables
        cmd /c "setup-env.bat && set > env-vars.txt"
        
        # Read the environment variables and set them for the current process
        Get-Content env-vars.txt | ForEach-Object {
          if ($_ -match "^([^=]+)=(.*)$") {
            $name = $matches[1]
            $value = $matches[2]
            # Set environment variable for the current process
            [System.Environment]::SetEnvironmentVariable($name, $value)
            # Also set it for GitHub Actions
            echo "$name=$value" >> $env:GITHUB_ENV
          }
        }
    
    - name: Build Native Binary (Windows)
      run: ./gradlew build --system-prop quarkus.package.type=native
    
    - name: Upload Native Binary (Windows)
      uses: actions/upload-artifact@v4
      with:
        name: native-windows
        path: build/*-runner.exe

  release:
    name: Create GitHub Release
    needs: [build, build-macos, build-windows]
    runs-on: ubuntu-latest
    permissions:
      contents: write # To create release tags and releases
      issues: write # To comment on issues and PRs
      pull-requests: write # To comment on issues and PRs
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # We need to fetch all history and tags for semantic-release to work
        fetch-depth: 0
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare release assets directory
      run: mkdir -p release-assets
      
    - name: Semantic Release
      id: semantic_release
      uses: cycjimmy/semantic-release-action@v4
      with:
        extra_plugins: |
          @semantic-release/git
          @semantic-release/github
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version from semantic-release
      id: get_version
      run: |
        if [ "${{ steps.semantic_release.outputs.new_release_published }}" = "true" ]; then
          echo "VERSION=${{ steps.semantic_release.outputs.new_release_version }}" >> $GITHUB_ENV
          echo "New version: ${{ steps.semantic_release.outputs.new_release_version }}"
        else
          echo "No new version published"
          exit 0
        fi
    
    - name: Prepare release assets with version
      if: steps.semantic_release.outputs.new_release_published == 'true'
      run: |
        cp keycloak-mcp-server-uber-jar/* release-assets/keycloak-mcp-server-${VERSION}-uber.jar
        cp native-linux/* release-assets/keycloak-mcp-server-${VERSION}-linux
        cp native-macos/* release-assets/keycloak-mcp-server-${VERSION}-macos
        cp native-windows/* release-assets/keycloak-mcp-server-${VERSION}-windows.exe
    
    - name: Upload release assets
      if: steps.semantic_release.outputs.new_release_published == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.VERSION }}
        name: Release v${{ env.VERSION }}
        draft: false
        files: |
          release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}